
==================== FINAL INTERFACE ====================
2018-09-22 07:55:22.1134103 UTC

interface main:Main 8043
  interface hash: 222fb69bc6926318c1b6c23c992b1aab
  ABI hash: 625b04e1b62be6cb8242a77728f1caeb
  export-list hash: 3aa64389eca715fd6675fcc03dc74d91
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9a60defcfeb069fa2a899a063feede38
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.boardString
  Main.canPlace
  Main.cellString
  Main.changeCell
  Main.changeCellRow
  Main.checkHorizontal
  Main.checkSides
  Main.displayBoard
  Main.flip
  Main.isBlackDisc
  Main.isEmptyCell
  Main.isWhiteDisc
  Main.main
  Main.mapList
  Main.rowString
  Main.startingBoard
  Main.Board
  Main.Cell{Main.Black Main.Empty Main.White}
  Main.LocX
  Main.LocY
  Main.Location
  Main.Row
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Err 97cd376c529926d7dcbd3f06020fe0fc
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.IO 7331ec6891ba7763ad75720258619382
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
84de31fc4b8d8e5cb6c1d94108489896
  $fEqCell :: GHC.Classes.Eq Main.Cell
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Cell Main.$fEqCell_$c== Main.$fEqCell_$c/= -}
84de31fc4b8d8e5cb6c1d94108489896
  $fEqCell_$c/= :: Main.Cell -> Main.Cell -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.Cell) (y :: Main.Cell) ->
                 case x of wild {
                   Main.Black
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Black -> GHC.Types.False }
                   Main.White
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.White -> GHC.Types.False }
                   Main.Empty
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Empty -> GHC.Types.False } }) -}
84de31fc4b8d8e5cb6c1d94108489896
  $fEqCell_$c== :: Main.Cell -> Main.Cell -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Cell) (ds1 :: Main.Cell) ->
                 case ds of wild {
                   Main.Black
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Black -> GHC.Types.True }
                   Main.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.White -> GHC.Types.True }
                   Main.Empty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Empty -> GHC.Types.True } }) -}
84de31fc4b8d8e5cb6c1d94108489896
  $fShowCell :: GHC.Show.Show Main.Cell
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Cell
                  Main.$fShowCell_$cshowsPrec
                  Main.$fShowCell_$cshow
                  Main.$fShowCell_$cshowList -}
da78e1a54c1b3b3f06cf0a9ba1c57883
  $fShowCell1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCell2) -}
719f4d3731a3b07b3ecf18218f2e6d03
  $fShowCell2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty"#) -}
3248b540a2d90fbe77e5310ea339cdee
  $fShowCell3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCell4) -}
3684aebef77eac22721f0ad58c3a53cb
  $fShowCell4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("White"#) -}
16e1b7d369bf7507869aff51e99e51fa
  $fShowCell5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowCell6) -}
f5dd8f032e1aba5b9dfd468f6d078fcd
  $fShowCell6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Black"#) -}
84de31fc4b8d8e5cb6c1d94108489896
  $fShowCell_$cshow :: Main.Cell -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Cell) ->
                 case x of wild {
                   Main.Black -> Main.$fShowCell5
                   Main.White -> Main.$fShowCell3
                   Main.Empty -> Main.$fShowCell1 }) -}
84de31fc4b8d8e5cb6c1d94108489896
  $fShowCell_$cshowList :: [Main.Cell] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Cell]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Cell Main.$w$cshowsPrec ls s) -}
84de31fc4b8d8e5cb6c1d94108489896
  $fShowCell_$cshowsPrec ::
    GHC.Types.Int -> Main.Cell -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Cell)
                   (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec w1 w2) -}
bdb834660ff8764a681cab2a52f1e399
  $tc'Black :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1021791883415571192##
                   13370394556599125045##
                   Main.$trModule
                   Main.$tc'Black2
                   0#
                   Main.$tc'Black1) -}
f0fcb3653a7bdc9354a07894774e0260
  $tc'Black1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f51953084b5095b8443e0e60cc06bab5
  $tc'Black2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Black3) -}
8f7e9f67a424b45be5b0219141d8602f
  $tc'Black3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Black"#) -}
d5b012cc0fe057abdc0e82a69cfc01ea
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3313183401698604321##
                   3093946561132164024##
                   Main.$trModule
                   Main.$tc'Empty1
                   0#
                   Main.$tc'Black1) -}
a30d0f705f73f10d7fece6d5e97689b6
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Empty2) -}
9c2003c2f51b21e7575924b427e661e4
  $tc'Empty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
200af9be2ab3befb292634550e18f24b
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7675616813521479818##
                   9297989712354570156##
                   Main.$trModule
                   Main.$tc'White1
                   0#
                   Main.$tc'Black1) -}
28a1158748cbb4bf50ecf0e90049c23e
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'White2) -}
23a74c4571120b55373f93a05b8bcbc2
  $tc'White2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'White"#) -}
d522cc350d7e2b31e72370e7c4fa0e68
  $tcCell :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16516943760283932036##
                   1561936439387902920##
                   Main.$trModule
                   Main.$tcCell1
                   0#
                   GHC.Types.krep$*) -}
0691b07b7985e7820b8364495e20fe5e
  $tcCell1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCell2) -}
c00feaf91f042aa9ed2504c950f93f24
  $tcCell2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cell"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
84de31fc4b8d8e5cb6c1d94108489896
  $w$cshowsPrec :: Main.Cell -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Main.Cell) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.Black -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCell5 w1
                   Main.White -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCell3 w1
                   Main.Empty
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowCell1 w1 }) -}
6648184b0673d17acde798c93cf2f1e6
  $wchangeCell ::
    Main.Cell -> Main.LocX -> Main.LocY -> Main.Board -> Main.Board
  {- Arity: 4, Strictness: <L,U><L,U(U)><L,U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Main.Cell)
                   (ww :: Main.LocX)
                   (ww1 :: Main.LocY)
                   (w1 :: Main.Board) ->
                 letrec {
                   go2 :: [GHC.Types.Int] -> [[Main.Cell]] -> [Main.Row]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [GHC.Types.Int]) (_ys :: [[Main.Cell]]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Row
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ Main.Row
                            : ipv2 ipv3
                            -> GHC.Types.:
                                 @ Main.Row
                                 (case ipv of wild2 { GHC.Types.I# x ->
                                  case ww1 of wild3 { GHC.Types.I# y ->
                                  case GHC.Prim.==# x y of lwild {
                                    DEFAULT -> ipv2 1# -> Main.changeCellRow w ww ipv2 } } })
                                 (go2 ipv1 ipv3) } }
                 } in
                 go2 Main.changeCell1 w1) -}
e08bff296d12afac84ea9573f6869d78
  type Board = [Main.Row]
84de31fc4b8d8e5cb6c1d94108489896
  data Cell = Black | White | Empty
66daa96ad4f9e6ec3ec78be5439167fc
  type LocX = GHC.Types.Int
afc030eef33aeed3e9e0e455eb1eb0de
  type LocY = GHC.Types.Int
b991fb914e0471413aaf66a77cf59636
  type Location = (Main.LocX, Main.LocY)
4906cb395f965d086561a6ac4a071bbd
  type Row = [Main.Cell]
0da7784662d5506589a95dcfe36d587d
  boardString :: Main.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
72546786c132be953a1e508333398d4a
  canPlace ::
    Main.Cell -> Main.Location -> Main.Board -> GHC.Types.Bool
  {- Strictness: x -}
43e98df761d54ffb4529f9ca79ad3abc
  cellString :: Main.Cell -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cell) ->
                 case ds of wild {
                   Main.Black -> Main.cellString5
                   Main.White -> Main.cellString3
                   Main.Empty -> Main.cellString1 }) -}
3cf984279f036c801cac7b284ff5eded
  cellString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.cellString2) -}
4dd95d6504a1f60356f6adeafe86f818
  cellString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("| "#) -}
943205396fb96cd57bc7780778285e54
  cellString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.cellString4) -}
0ef7f2ae961e34db79c53d4d02ff1fa8
  cellString4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("|W"#) -}
e27e3778a610c8e79790513ca715ded5
  cellString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.cellString6) -}
404307015421ab2fd61158ec4e9082d3
  cellString6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("|B"#) -}
6b514911aadee2f335a8992e8d5de198
  changeCell ::
    Main.Cell -> Main.Location -> Main.Board -> Main.Board
  {- Arity: 3, Strictness: <L,U><S,1*U(U(U),U(U))><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Cell) (w1 :: Main.Location) (w2 :: Main.Board) ->
                 case w1 of ww { (,) ww1 ww2 -> Main.$wchangeCell w ww1 ww2 w2 }) -}
78b62f7ad5fa3171a7a075d8e46fef15
  changeCell1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
c86893f143a7f8c2d6c98d1cd3cf526b
  changeCellRow :: Main.Cell -> Main.LocX -> Main.Row -> Main.Row
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>,
     Unfolding: (\ (ds :: Main.Cell)
                   (ds1 :: Main.LocX)
                   (ds2 :: [Main.Cell]) ->
                 case ds2 of wild {
                   [] -> GHC.Types.[] @ Main.Cell
                   : ipv ipv1
                   -> letrec {
                        go2 :: [GHC.Types.Int] -> [Main.Cell] -> [Main.Cell]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                        = \ (ds3 :: [GHC.Types.Int]) (_ys :: [Main.Cell]) ->
                          case ds3 of wild1 {
                            [] -> GHC.Types.[] @ Main.Cell
                            : ipv2 ipv3
                            -> case _ys of wild2 {
                                 [] -> GHC.Types.[] @ Main.Cell
                                 : ipv4 ipv5
                                 -> GHC.Types.:
                                      @ Main.Cell
                                      (case ipv2 of wild3 { GHC.Types.I# x ->
                                       case ds1 of wild4 { GHC.Types.I# y ->
                                       case GHC.Prim.==# x y of lwild {
                                         DEFAULT -> ipv4 1# -> ds } } })
                                      (go2 ipv3 ipv5) } }
                      } in
                      go2 Main.changeCell1 wild }) -}
cb60f42601bbd2c1083f3723896f4d3b
  checkHorizontal ::
    Main.Cell -> Main.LocX -> Main.Row -> GHC.Types.Bool
  {- Arity: 3, Strictness: <B,A><B,A><B,A>x,
     Unfolding: InlineRule (3, True, True)
                (\ (disc :: Main.Cell) (locX :: Main.LocX) (row :: Main.Row) ->
                 GHC.Err.undefined
                   @ 'GHC.Types.LiftedRep
                   @ GHC.Types.Bool
                   Main.checkHorizontal1
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
fb9e1ed409346757637f47cc6c3ce3d6
  checkHorizontal1 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.checkHorizontal10
                   Main.checkHorizontal2
                   GHC.Stack.Types.EmptyCallStack) -}
66ac301cc1125b471c501f48d3be9ac2
  checkHorizontal10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.checkHorizontal11) -}
97a2de5bccaece6b71e2f6089d7dbd1f
  checkHorizontal11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("undefined"#) -}
0c266c1ff045ec1060402082bccd3463
  checkHorizontal2 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.checkHorizontal9
                   Main.checkHorizontal8
                   Main.checkHorizontal6
                   Main.checkHorizontal5
                   Main.checkHorizontal4
                   Main.checkHorizontal5
                   Main.checkHorizontal3) -}
5460ad844a35668d0f94a41fa9d15afa
  checkHorizontal3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 42#) -}
9d09d61eb1aa75fe09202ffc44fa4149
  checkHorizontal4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 33#) -}
30367f55d444884f9b280075f592aa02
  checkHorizontal5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 94#) -}
bf2caa21ff9c0f894515496e7de00188
  checkHorizontal6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.checkHorizontal7) -}
25ad6929a216c7906fdd568aacca0ec3
  checkHorizontal7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("src\\Main.hs"#) -}
d5c0ee2d8c94e0592697fbb7b6a95bd9
  checkHorizontal8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
a187ba41bd2f166d41c95a7368f57ba0
  checkHorizontal9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
84960f9e103f3a53b35d46971254867e
  checkSides :: Main.Cell -> Main.LocX -> Main.Row -> GHC.Types.Bool
  {- Arity: 3, Strictness: <B,A><B,A><B,A>x,
     Unfolding: InlineRule (3, True, True)
                (\ (disc :: Main.Cell) (locX :: Main.LocX) (row :: Main.Row) ->
                 GHC.Err.undefined
                   @ 'GHC.Types.LiftedRep
                   @ GHC.Types.Bool
                   Main.checkSides1
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
c8ba0cda1834e601fd01f0438b0ac65e
  checkSides1 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.checkHorizontal10
                   Main.checkSides2
                   GHC.Stack.Types.EmptyCallStack) -}
15c48fe6c9a6e58d7e522556729aa638
  checkSides2 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.checkHorizontal9
                   Main.checkHorizontal8
                   Main.checkHorizontal6
                   Main.checkSides5
                   Main.checkSides4
                   Main.checkSides5
                   Main.checkSides3) -}
cd0e10f2e1a928005af65fb15481fcab
  checkSides3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 37#) -}
8f2d7dd6181393851f5c7bba0806510e
  checkSides4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 28#) -}
bd1b90efc4bd3228dbdc59fa15c693ed
  checkSides5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 98#) -}
f92ff5b79b44fe5fa1aebf6b64622c60
  displayBoard :: Main.Board -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.displayBoard1
                  `cast`
                (<Main.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f6a7372a2f3533617981eef7072ba792
  displayBoard1 ::
    Main.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Main.Board) ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Main.displayBoard2
                      (Main.boardString x))
                   GHC.Types.False) -}
b1bdbb9572df175f1186a574fcacad19
  displayBoard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \-----------------\n"#) -}
aa52663e0a5b4fbbf76f4306c2fb2a18
  flip :: Main.Cell -> Main.Cell
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cell) ->
                 case ds of wild {
                   Main.Black -> Main.White
                   Main.White -> Main.Black
                   Main.Empty -> Main.Empty }) -}
708e3b857a6045c76f182505450e87eb
  isBlackDisc :: Main.Cell -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cell) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False Main.Black -> GHC.Types.True }) -}
e7eb5fd95f58f72ed24081074d8d278a
  isEmptyCell :: Main.Cell -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cell) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False Main.Empty -> GHC.Types.True }) -}
e54ff338cf988141e81201e1187b0f14
  isWhiteDisc :: Main.Cell -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cell) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False Main.White -> GHC.Types.True }) -}
24b144cf55956830430b0578786de7e9
  main :: GHC.Types.IO ()
  {- Strictness: x -}
b342836353b922f72de514f465137ecf
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1 @ () Main.main) -}
055a2b4cfd49ead8702e3d952b4340f4
  mapList :: [a] -> [(GHC.Types.Int, a)]
  {- Arity: 1,
     Unfolding: (\ @ a ->
                 GHC.List.zip @ GHC.Types.Int @ a Main.changeCell1) -}
72381d3d42d8c9bfbb8c77d463e2dc7e
  rowString :: Main.Row -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
6b2a18f4cb9c71d894a664a081af8a9e
  startingBoard :: Main.Board
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   Main.startingBoard1) -}
7e303a86f1b6317ce9c0d4e446cfd553
  startingBoard1 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   Main.startingBoard2) -}
88031cbf19e02d89629cd57a4263227f
  startingBoard10 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard11) -}
c5ac15dc7dda6ddb716d7704be8f6c5b
  startingBoard11 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard12) -}
4f13dbb2c89a4048219c74b791962edd
  startingBoard12 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard13) -}
e016c71d945318f0b5f1c09542604c38
  startingBoard13 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard14) -}
d70f720fb34540540bcdf4b5bf55ccc2
  startingBoard14 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard15) -}
1b0420cd292f98c181f4f24619c465cf
  startingBoard15 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   (GHC.Types.[] @ Main.Cell)) -}
676d71eaf870aec214d02700d85de452
  startingBoard16 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard17) -}
1fbb46fd0f7a7800fb6f1692f8b38f01
  startingBoard17 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard18) -}
d48e2ec2da487b1c736cae7c6a6f5d68
  startingBoard18 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard19) -}
bbe0beb7ff25c4520307132818def747
  startingBoard19 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Black
                   Main.startingBoard20) -}
8fa903e4c81291e65b991f7e7339c394
  startingBoard2 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   Main.startingBoard3) -}
6d06c44d5c724cbe3a52d0dfae5871fd
  startingBoard20 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.White
                   Main.startingBoard13) -}
e292d005d4f0ac6d7d22b5454f059c90
  startingBoard21 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard22) -}
fc78c6ae22544579e335e262aa939103
  startingBoard22 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard23) -}
979796d8e94e557f10fc332fe98c221c
  startingBoard23 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard24) -}
d42401a0f705927d1f73d39651288a61
  startingBoard24 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.White
                   Main.startingBoard25) -}
842fda738c82ba15879e188a0893eb20
  startingBoard25 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Black
                   Main.startingBoard13) -}
711d64ddc29fbb2d42a89b9bab417952
  startingBoard3 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard21
                   Main.startingBoard4) -}
dfb422c7e2bb6acbd48a89cd1eb8279c
  startingBoard4 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard16
                   Main.startingBoard5) -}
c0fc675232fe090f5ac2849b2669d49b
  startingBoard5 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   Main.startingBoard6) -}
1f793f0475e94cb1aaaf0ebd0cbcd94a
  startingBoard6 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   Main.startingBoard7) -}
c664c74d7430c7c8d3352b43efd05556
  startingBoard7 :: [Main.Row]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Row
                   Main.startingBoard8
                   (GHC.Types.[] @ Main.Row)) -}
6402580129c748354ed16151f6630461
  startingBoard8 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard9) -}
9e0771360c06e8c3f9f6c779a45a5786
  startingBoard9 :: [Main.Cell]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Cell
                   Main.Empty
                   Main.startingBoard10) -}
instance [safe] GHC.Classes.Eq [Main.Cell] = Main.$fEqCell
instance [safe] GHC.Show.Show [Main.Cell] = Main.$fShowCell
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

